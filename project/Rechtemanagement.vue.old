<template>
<Card>
  <template #title>
    <div class="flex items-center">
      <span class="text-lg font-semibold">Rechtemanagement</span>
      <Button icon="pi pi-plus" severity="success" text aria-label="Neuen Benutzer anlegen" @click="showDialog = true" class="ml-auto p-2 text-sm" />
    </div>
  </template>
  <template #content>
    <DataTable :value="users" class="p-datatable-sm" responsiveLayout="scroll">
      <Column header="Benutzer">
        <template #body="slotProps">
          <div class="flex align-items-center gap-3">
            <Avatar :image="slotProps.data.image" icon="pi pi-user" size="large" shape="circle" />
            <div>
              <div class="font-medium">{{ slotProps.data.name }}</div>
              <div class="text-sm text-gray-500">{{ slotProps.data.email }}</div>
            </div>
          </div>
        </template>
      </Column>

      <Column header="Rolle">
        <template #body="slotProps">
          <Tag :value="slotProps.data.role" :style="roleStyle(slotProps.data.role)" />
        </template>
      </Column>

      <Column header="Business Unit">
        <template #body="slotProps">
          <div>{{ slotProps.data.bu }}</div>
        </template>
      </Column>

      <Column header="Aktionen" style="width: 160px">
        <template #body="slotProps">
          <div class="flex gap-2">
            <Button icon="pi pi-envelope" text rounded severity="info" />
            <Button icon="pi pi-pencil" text rounded severity="secondary" />
            <Button icon="pi pi-trash" text rounded severity="danger" @click="confirmDelete(slotProps.index)" />
          </div>
        </template>
      </Column>
    </DataTable>

    <Dialog v-model:visible="showDialog" header="Neuen Benutzer anlegen" modal class="w-96" :closable="false">
      <template #header>
        <div class="flex items-center w-full">
          <span class="text-lg font-semibold">Neuen Benutzer anlegen</span>
          <Button icon="pi pi-times" text rounded class="ml-auto" @click="showDialog = false" />
        </div>
      </template>
      <div class="flex flex-col gap-3 mt-3">
        <InputText v-model="newUser.name" placeholder="Name" />
        <InputText v-model="newUser.email" placeholder="Email-Adresse" :class="{'p-invalid': !isValidEmail(newUser.email) && newUser.email}" />
        <Dropdown v-model="newUser.role" :options="roles" placeholder="Rolle" class="w-full" />
        <MultiSelect v-model="newUser.bu" :options="businessUnits" placeholder="Business Unit(s)" display="chip" class="w-full" />
      </div>
      <template #footer>
        <Button label="Einladung versenden" icon="pi pi-send" :disabled="!isValidEmail(newUser.email)" @click="sendInvitation" />
      </template>
    </Dialog>

    <Dialog v-model:visible="deleteDialog" header="Benutzer löschen" modal class="w-96">
      <p>Den Benutzer wirklich löschen?</p>
      <template #footer>
        <Button label="Abbrechen" text @click="deleteDialog = false" />
        <Button label="Benutzer löschen" severity="danger" @click="deleteUser" />
      </template>
    </Dialog>

    <Toast />
  </template>
</Card>
</template>

<script setup>
import { ref } from 'vue';
import { useToast } from 'primevue/usetoast';
import Card from 'primevue/card';
import DataTable from 'primevue/datatable';
import Column from 'primevue/column';
import Button from 'primevue/button';
import Dialog from 'primevue/dialog';
import InputText from 'primevue/inputtext';
import Dropdown from 'primevue/dropdown';
import MultiSelect from 'primevue/multiselect';
import Avatar from 'primevue/avatar';
import Tag from 'primevue/tag';
import Toast from 'primevue/toast';

const toast = useToast();
const showDialog = ref(false);
const deleteDialog = ref(false);
const deleteIndex = ref(null);

const roles = ['Admin', 'Dev', 'Analyst'];
const businessUnits = ['GC Gruppe', 'Search', 'CG Elementum', 'bimsplus'];

const users = ref([
{
  name: 'Jörg Wehrenberg',
  email: 'Joerg.Wehrenberg@gc-gruppe.de',
  role: 'Admin',
  bu: ['GC Gruppe'],
  image: 'https://www.primefaces.org/wp-content/uploads/2020/05/placeholder.png'
},
{
  name: 'Steffen Giese',
  email: 'steffen.giese@example.com',
  role: 'Dev',
  bu: ['Search'],
  image: null
},
{
  name: 'Heiner Holzhüter',
  email: 'heiner.holzhueter.extern@gc-gruppe.de',
  role: 'Admin',
  bu: ['Search'],
  image: null
},
{
  name: 'Krzysztof Michalak',
  email: 'kmichalak@grupa-hbh.pl',
  role: 'Analyst',
  bu: ['bimsplus'],
  image: null
}
]);

const newUser = ref({
name: '',
email: '',
role: '',
bu: [],
image: null
});

const isValidEmail = (email) => {
return /^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email);
};

const roleStyle = (role) => {
switch (role) {
  case 'Admin':
    return { backgroundColor: '#fdecea', color: '#b73e3e' };
  case 'Dev':
    return { backgroundColor: '#e6f1fb', color: '#3a6ea5' };
  case 'Analyst':
    return { backgroundColor: '#e6f7f1', color: '#31796b' };
  default:
    return {};
}
};

const sendInvitation = () => {
users.value.push({ ...newUser.value });
showDialog.value = false;
toast.add({ severity: 'success', summary: 'Erfolg', detail: 'Benutzer wurde eingeladen', life: 3000 });
newUser.value = { name: '', email: '', role: '', bu: [], image: null };
};

const confirmDelete = (index) => {
deleteIndex.value = index;
deleteDialog.value = true;
};

const deleteUser = () => {
if (deleteIndex.value !== null) {
  users.value.splice(deleteIndex.value, 1);
  deleteDialog.value = false;
  deleteIndex.value = null;
  toast.add({ severity: 'success', summary: 'Erfolg', detail: 'Benutzer wurde gelöscht', life: 3000 });
}
};
</script>
